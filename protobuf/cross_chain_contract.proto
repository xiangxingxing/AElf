syntax = "proto3";

import "acs7.proto";
import "google/protobuf/wrappers.proto";
import "acs1.proto";
import public "google/protobuf/timestamp.proto";

option csharp_namespace = "AElf.Contracts.CrossChain";

service CrossChainContract {
    
    option (aelf.csharp_state) = "AElf.Contracts.CrossChain.CrossChainContractState";
    option (aelf.base) = "acs7.proto";
    option (aelf.base) = "acs1.proto";
    
    // Actions
    rpc Initialize (InitializeInput) returns (google.protobuf.Empty) {
    }
    rpc ChangOwnerAddress(aelf.Address) returns (google.protobuf.Empty) {
    }

    // Views
    rpc VerifyTransaction (VerifyTransactionInput) returns (google.protobuf.BoolValue) {
        option (aelf.is_view) = true;
    }
    rpc GetSideChainCreator (aelf.SInt32Value) returns (aelf.Address) {
        option (aelf.is_view) = true;
    }
    rpc GetChainStatus (aelf.SInt32Value) returns (aelf.SInt32Value) {
        option (aelf.is_view) = true;
    }
    rpc GetSideChainHeight (aelf.SInt32Value) returns (aelf.SInt64Value) {
        option (aelf.is_view) = true;
    }   
    rpc GetParentChainHeight (google.protobuf.Empty) returns (aelf.SInt64Value) {
        option (aelf.is_view) = true;
    }
    rpc GetParentChainId (google.protobuf.Empty) returns (aelf.SInt32Value) {
        option (aelf.is_view) = true;
    }
    rpc GetSideChainBalance (aelf.SInt32Value) returns (aelf.SInt64Value) {
        option (aelf.is_view) = true;
    }
    rpc GetPendingCrossChainIndexingProposal (google.protobuf.Empty) returns (GetPendingCrossChainIndexingProposalOutput) {
        option (aelf.is_view) = true;
    }
}

message InitializeInput {
    int32 parent_chain_id = 1;
    int64 creation_height_on_parent_chain = 2;
    bool is_privilege_preserved = 3;
}

message VerifyTransactionInput {
    aelf.Hash transaction_id = 1;
    aelf.MerklePath path = 2;
    sint64 parent_chain_height = 3;
    int32 verified_chain_id = 4;
}

message IndexedChainHeightDict{
    map<int32, int64> indexed_chain_heights = 1;
}

// Events
message SideChainCreatedEvent {
    option (aelf.is_event) = true;
    aelf.Address creator = 1;
    int32 chainId = 2;
}

message Disposed {
    option (aelf.is_event) = true;
    int32 chain_id = 1;
}

message CrossChainIndexingDataProposedEvent{
    option (aelf.is_event) = true;
    acs7.CrossChainBlockData proposed_cross_chain_data = 1;
}

message SideChainBlockDataIndexedEvent{
    option (aelf.is_event) = true;
}

message CrossChainIndexingProposal{
    aelf.Hash proposal_id = 1;
    aelf.Address proposer = 2;
    acs7.CrossChainBlockData proposed_cross_chain_block_data = 3;
    CrossChainIndexingProposalStatus status = 4;
}

message GetPendingCrossChainIndexingProposalOutput{
    aelf.Hash proposal_id = 1;
    aelf.Address proposer = 2;
    bool to_be_released = 3;
    acs7.CrossChainBlockData proposed_cross_chain_block_data = 4;
    google.protobuf.Timestamp expired_time = 5;
}

enum CrossChainIndexingProposalStatus{
    NON_PROPOSED = 0;
    PROPOSED = 1;
    PENDING = 2;
    TO_BE_RELEASED = 3;
}