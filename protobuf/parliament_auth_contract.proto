syntax = "proto3";

import "acs1.proto";
import "acs3.proto";

option csharp_namespace = "AElf.Contracts.ParliamentAuth";

service ParliamentAuthContract {
    
    option (aelf.csharp_state) = "AElf.Contracts.ParliamentAuth.ParliamentAuthState";
    option (aelf.base) = "acs3.proto";
    option (aelf.base) = "acs1.proto";
    
    // Actions
    rpc Initialize(InitializeInput) returns (google.protobuf.Empty) {
    }
    rpc CreateOrganization (CreateOrganizationInput) returns (aelf.Address) {
    }
    rpc ApproveMultiProposals(ProposalIdList) returns (google.protobuf.Empty){
    }
    rpc CreateProposalBySystemContract(CreateProposalBySystemContractInput) returns (aelf.Hash){
    }
    rpc GetOrganization (aelf.Address) returns (Organization) {
        option (aelf.is_view) = true;
    }
    rpc GetDefaultOrganizationAddress (google.protobuf.Empty) returns (aelf.Address) {
        option (aelf.is_view) = true;
    }
    rpc ValidateAddressIsParliamentMember(aelf.Address) returns (google.protobuf.BoolValue){
         option (aelf.is_view) = true;
    }
    rpc GetProposerWhiteListContext(google.protobuf.Empty) returns (GetProposerWhiteListContextOutput){
        option (aelf.is_view) = true;
    }
    rpc ValidateOrganizationExist(aelf.Address) returns (google.protobuf.BoolValue){
         option (aelf.is_view) = true;
    }
    rpc GetNotApprovedProposals(ProposalIdList) returns (ProposalIdList){
        option (aelf.is_view) = true;
    }
    rpc GetValidProposals(ProposalIdList) returns (ProposalIdList){
        option (aelf.is_view) = true;
    }
}

message CreateOrganizationInput {
    sint32 release_threshold = 1;
}

message Organization {
    sint32 release_threshold = 1;
    aelf.Address organization_address = 2;
    aelf.Hash organization_hash = 3;
}

message CreateProposalBySystemContractInput {
    acs3.CreateProposalInput proposal_input =1;
    aelf.Address origin_proposer = 2;
    string proposal_id_feedback_method = 3;
}

message ProposalInfo {
    aelf.Hash proposal_id = 1;
    string contract_method_name = 2;
    aelf.Address to_address = 3;
    bytes params = 4;
    google.protobuf.Timestamp expired_time = 5;
    aelf.Address proposer = 6;
    aelf.Address organization_address = 7;
    repeated aelf.Address approved_representatives = 8;
}

message InitializeInput{
    int32 genesis_owner_releaseThreshold = 1;
    aelf.Address privileged_proposer = 2;
    bool proposer_authority_required = 3;
}

message ProposalCreated{
    option (aelf.is_event) = true;
    aelf.Hash proposal_id = 1;
}

message ProposalReleased{
    option (aelf.is_event) = true;
    aelf.Hash proposal_id = 1;
}

message ProposerWhiteList{
    repeated aelf.Address proposers = 1;
}

message ProposalIdList{
    repeated aelf.Hash proposal_ids = 1;
}

message GetProposerWhiteListContextOutput{
    repeated aelf.Address proposers = 1;
    bool proposer_authority_required = 2;
}